import { IoTClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTClient";
import { CreatePolicyVersionRequest, CreatePolicyVersionResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type CreatePolicyVersionCommandInput = CreatePolicyVersionRequest;
export declare type CreatePolicyVersionCommandOutput = CreatePolicyVersionResponse & __MetadataBearer;
/**
 * <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a
 *          new policy version. A managed policy can have up to five versions. If the policy has five
 *          versions, you must use <a>DeletePolicyVersion</a> to delete an existing version
 *          before you create a new one.</p>
 *          <p>Optionally, you can set the new version as the policy's default version. The default
 *          version is the operative version (that is, the version that is in effect for the
 *          certificates to which the policy is attached).</p>
 */
export declare class CreatePolicyVersionCommand extends $Command<CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput, IoTClientResolvedConfig> {
    readonly input: CreatePolicyVersionCommandInput;
    constructor(input: CreatePolicyVersionCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput>;
    private serialize;
    private deserialize;
}
