import { IoTClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTClient";
import { TransferCertificateRequest, TransferCertificateResponse } from "../models/models_2";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type TransferCertificateCommandInput = TransferCertificateRequest;
export declare type TransferCertificateCommandOutput = TransferCertificateResponse & __MetadataBearer;
/**
 * <p>Transfers the specified certificate to the specified AWS account.</p>
 *          <p>You can cancel the transfer until it is acknowledged by the recipient.</p>
 *          <p>No notification is sent to the transfer destination's account. It is up to the caller
 *          to notify the transfer target.</p>
 *          <p>The certificate being transferred must not be in the ACTIVE state. You can use the
 *          UpdateCertificate API to deactivate it.</p>
 *          <p>The certificate must not have any policies attached to it. You can use the
 *          DetachPrincipalPolicy API to detach them.</p>
 */
export declare class TransferCertificateCommand extends $Command<TransferCertificateCommandInput, TransferCertificateCommandOutput, IoTClientResolvedConfig> {
    readonly input: TransferCertificateCommandInput;
    constructor(input: TransferCertificateCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TransferCertificateCommandInput, TransferCertificateCommandOutput>;
    private serialize;
    private deserialize;
}
