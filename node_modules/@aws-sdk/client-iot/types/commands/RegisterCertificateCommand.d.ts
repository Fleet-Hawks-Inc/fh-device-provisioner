import { IoTClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTClient";
import { RegisterCertificateRequest, RegisterCertificateResponse } from "../models/models_1";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type RegisterCertificateCommandInput = RegisterCertificateRequest;
export declare type RegisterCertificateCommandOutput = RegisterCertificateResponse & __MetadataBearer;
/**
 * <p>Registers a device certificate with AWS IoT. If you have more than one CA certificate
 *          that has the same subject field, you must specify the CA certificate that was used to sign
 *          the device certificate being registered.</p>
 */
export declare class RegisterCertificateCommand extends $Command<RegisterCertificateCommandInput, RegisterCertificateCommandOutput, IoTClientResolvedConfig> {
    readonly input: RegisterCertificateCommandInput;
    constructor(input: RegisterCertificateCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterCertificateCommandInput, RegisterCertificateCommandOutput>;
    private serialize;
    private deserialize;
}
