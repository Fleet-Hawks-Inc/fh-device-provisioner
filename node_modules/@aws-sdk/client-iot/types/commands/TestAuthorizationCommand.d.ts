import { IoTClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTClient";
import { TestAuthorizationRequest, TestAuthorizationResponse } from "../models/models_1";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type TestAuthorizationCommandInput = TestAuthorizationRequest;
export declare type TestAuthorizationCommandOutput = TestAuthorizationResponse & __MetadataBearer;
/**
 * <p>Tests if a specified principal is authorized to perform an AWS IoT action on a
 *          specified resource. Use this to test and debug the authorization behavior of devices that
 *          connect to the AWS IoT device gateway.</p>
 */
export declare class TestAuthorizationCommand extends $Command<TestAuthorizationCommandInput, TestAuthorizationCommandOutput, IoTClientResolvedConfig> {
    readonly input: TestAuthorizationCommandInput;
    constructor(input: TestAuthorizationCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestAuthorizationCommandInput, TestAuthorizationCommandOutput>;
    private serialize;
    private deserialize;
}
