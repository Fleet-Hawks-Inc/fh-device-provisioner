import { IoTClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTClient";
import { RegisterCertificateWithoutCARequest, RegisterCertificateWithoutCAResponse } from "../models/models_1";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type RegisterCertificateWithoutCACommandInput = RegisterCertificateWithoutCARequest;
export declare type RegisterCertificateWithoutCACommandOutput = RegisterCertificateWithoutCAResponse & __MetadataBearer;
/**
 * <p>Register a certificate that does not have a certificate authority (CA).</p>
 */
export declare class RegisterCertificateWithoutCACommand extends $Command<RegisterCertificateWithoutCACommandInput, RegisterCertificateWithoutCACommandOutput, IoTClientResolvedConfig> {
    readonly input: RegisterCertificateWithoutCACommandInput;
    constructor(input: RegisterCertificateWithoutCACommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterCertificateWithoutCACommandInput, RegisterCertificateWithoutCACommandOutput>;
    private serialize;
    private deserialize;
}
